name: "Component Builder push to production"
on:
  pull_request_target:
    types:
      - 'closed'
    paths:
      - 'containers/fedora/**'
    branches:
      - 'main'

jobs:
  push-images-to-production:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      FEDORA_VARS_FILE: "containers/fedora/fedora-vars"
      PR_NUMBER: ${{ github.event.number }}
      FULL_EMULATION: "true"
      DEBIAN_FRONTEND: noninteractive
      PR: "12"
    steps:
      - name: Check out code 
        uses: actions/checkout@v4
      - name: Fetch base Fedora image
        run: |
          set -euo pipefail
          VERS=$(sed -n "s/^FEDORA_VERSION:[[:space:]]\(.*\)/\1/pi" ${{ env.FEDORA_VARS_FILE }})
          echo "PR number is ${{ env.PR_NUMBER }} and fedora ${VERS}"
      - name: Install dependencies
        run: |
          sudo apt-get install -y podman
      - name: Login in to quay.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.QUAY_SUSER }}
          password: ${{ secrets.QUAY_STOKEN }}
          registry: quay.io
      - name: Create image manifest and push the image to stage
        run: |
          VERS=$(sed -n "s/^FEDORA_VERSION:[[:space:]]\(.*\)/\1/pi" ${{ env.FEDORA_VARS_FILE }})
          PROD_REPO=quay.io/sasundar/qe-cnv-tests-fedora
          STAGE_REPO=quay.io/sasundar/qe-cnv-tests-fedora-staging
          X86_64_STAGE_IMG=${STAGE_REPO}:${VERS}-x86_64-pr-${{ env.PR }}
          AARCH64_STAGE_IMG=${STAGE_REPO}:${VERS}-aarch64-pr-${{ env.PR }}
          S390_STAGE_IMG=${STAGE_REPO}:${VERS}-s390x-pr-${{ env.PR }}
          PROD_MANIFEST=${PROD_REPO}:${VERS}
          X86_64_PROD_IMG=${PROD_REPO}:${VERS}-x86_64
          AARCH64_PROD_IMG=${PROD_REPO}:${VERS}-aarch64
          S390_PROD_IMG=${PROD_REPO}:${VERS}-s390x
          echo "${VERS} ${PROD_MANIFEST} ${X86_64_STAGE_IMG} ${AARCH64_STAGE_IMG} ${S390_STAGE_IMG} ${X86_64_PROD_IMG} ${AARCH64_PROD_IMG} ${S390_PROD_IMG}"

          # Backup the existing images, if available
          podman manifest inspect ${PROD_MANIFEST} 1>/dev/null 2>&1
          if [ $? -eq 0 ]; then
              echo "Trying to backup the existing image"
              podman pull ${X86_64_PROD_IMG}
              podman pull ${AARCH64_PROD_IMG}
              podman pull ${S390_PROD_IMG}
              podman tag ${X86_64_PROD_IMG} ${X86_64_PROD_IMG}-${{ env.PR }}
              podman tag ${AARCH64_PROD_IMG} ${AARCH64_PROD_IMG}-${{ env.PR }}
              podman tag ${S390_PROD_IMG} ${S390_PROD_IMG}-${{ env.PR }}
              podman manifest create ${PROD_MANIFEST}-${{ env.PR }} \
                ${X86_64_PROD_IMG}-${{ env.PR }} \
                ${AARCH64_PROD_IMG}-${{ env.PR }} \
                ${S390_PROD_IMG}-${{ env.PR }} 
              podman push ${X86_64_PROD_IMG}-${{ env.PR }}
              podman push ${AARCH64_PROD_IMG}-${{ env.PR }}
              podman push ${S390_PROD_IMG}-${{ env.PR }}
              podman manifest push ${PROD_MANIFEST}-${{ env.PR }} --all
          fi

          # Pull the fedora container images from stage
          podman pull ${X86_64_STAGE_IMG}
          podman pull ${AARCH64_STAGE_IMG}
          podman pull ${S390_STAGE_IMG}
          echo "Passed pulling the stage images"

          # Tag the container images to prod
          podman tag ${X86_64_STAGE_IMG} ${X86_64_PROD_IMG}
          podman tag ${AARCH64_STAGE_IMG} ${AARCH64_PROD_IMG}
          podman tag ${S390_STAGE_IMG} ${S390_PROD_IMG}
          echo "Tagged the requred images"

          podman manifest create ${PROD_MANIFEST} \
            ${X86_64_PROD_IMG} \
            ${AARCH64_PROD_IMG} \
            ${S390_PROD_IMG}
          podman push ${X86_64_PROD_IMG}
          podman push ${AARCH64_PROD_IMG}
          podman push ${S390_PROD_IMG}
          podman manifest push ${PROD_MANIFEST} --all
